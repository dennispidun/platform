import JavaBasics;
import JavaMapping;
import Basics;

@advice(IIPEcosphere)
vilScript IIPEcosphere (Project source, Configuration config, Project target) {

    // preliminary!!! make it language-generic

    // java packages, turned to paths below
    String javaDatatypesPackage = "iip.datatypes";
    String javaSerializersPackage = "iip.serializers";
    String javaInterfacesPackage = "iip.interfaces";
    String javaStubsPackage = "iip.stubs";
    String javaNodesPackage = "iip.nodes";
    String dfltMain="de.iip_ecosphere.platform.support.LifecycleHandler$"+"WaitingStarterWithShutdown";

    Path ecsRuntimeRoot = "${target}/ecsRuntime";
    Path serviceMgrRoot = "${target}/serviceMgr";
    Path platformRoot = "${target}/platform";
    
    main(Project source, Configuration config, Project target) = {
        generateApps(source, config, target);
        generatePlatform(source, config, target);
    }
    
    generateApps(Project source, Configuration config, Project target) = {
        setOf(RecordType) recordTypes = RecordType.allInstances();
        for (Application a : Application.allInstances()) {
            String appName = asTypeName(a.name);
            Path appRoot = "${target}/${appName}";
            appRoot.mkdir();
            Path javaSrc = "${appRoot}/src/main/java";
            Path pySrc = "${appRoot}/src/main/python";
            Path resourcesSrc = "${appRoot}/src/main/resources";
            Path assemblySrc = "${appRoot}/src/main/assembly";
            Path javaDatatypesSrc = "${javaSrc}/${toPath(javaDatatypesPackage)}";
            Path javaSerializersSrc = "${javaSrc}/${toPath(javaSerializersPackage)}";
            Path javaInterfacesSrc = "${javaSrc}/${toPath(javaInterfacesPackage)}";
            Path javaStubsSrc = "${javaSrc}/${toPath(javaStubsPackage)}";
            Path javaNodesSrc = "${javaSrc}/${toPath(javaNodesPackage)}";

            javaDatatypesSrc.mkdir();
            javaSerializersSrc.mkdir();
            // generate data classes and serializers
            setOf(String) javaSerializers = {};
            for (RecordType r : recordTypes) {
                // generate for all languages and according to serializer settings
                String clsName = asTypeName(r.name);
                vilTemplateProcessor("JavaType", config, "${javaDatatypesSrc}/${clsName}.java", type=r, pkg=javaDatatypesPackage);
                vilTemplateProcessor("JavaJsonSerializer", config, "${javaSerializersSrc}/${clsName}Serializer.java", type=r, pkg=javaSerializersPackage, typePkg=javaDatatypesPackage);
                javaSerializers.add("${javaSerializersPackage}.${clsName}Serializer");
                vilTemplateProcessor("PythonType", config, "${pySrc}/${clsName}.py", type=r);
                vilTemplateProcessor("PythonJsonSerializer", config, "${pySrc}/${clsName}Serializer.py", type=r);
            };

            // generate service classes and service integration
            setOf(String) artifacts = {};
            sequenceOf(MeshElement) elements = {};
            artifacts.add(a.artifact);
            mapOf(MeshElement, setOf(MeshConnector)) mappedMesh = {};
            // TODO filter according to assigned resources, allow for later instantiation
            for (ServiceMesh n : a.services) {
                setOf(MeshElement) nodes = n.sources->closure(MeshElement e|nextMeshNodes(e, mappedMesh));
                for (MeshElement no : nodes) {
                    String clsName = asTypeName(no.name);
                    vilTemplateProcessor("JavaMeshElementInterface", config, "${javaInterfacesSrc}/${clsName}Service.java", elt=no, pkg=javaInterfacesPackage);
                    vilTemplateProcessor("JavaMeshElementStub", config, "${javaStubsSrc}/${clsName}Stub.java", elt=no, pkg=javaStubsPackage);
                    vilTemplateProcessor("JavaSpringCloudStreamMeshElement", config, "${javaNodesSrc}/${clsName}.java", elt=no, pkg=javaNodesPackage, app=a);
                    artifacts.add(getArtifact(no));
                    elements.add(no);
                };
            };
            
            vilTemplateProcessor("JavaStarter", config, "${javaSrc}/iip/Starter.java", pkg="iip", serializers=javaSerializers);

            vilTemplateProcessor("JavaSpringCloudStreamYaml", config, "${resourcesSrc}/application.yml", mappedMesh=mappedMesh, nodes=elements);
            vilTemplateProcessor("SpringCloudStreamDeploymentDescriptor", config, "${resourcesSrc}/deployment.yml", app=a, elements=elements);
            vilTemplateProcessor("JavaLogbackXml", config, "${resourcesSrc}/logback.xml");

            assemblySrc.mkdir();
            vilTemplateProcessor("JavaInterfaceAssembly", config, "${assemblySrc}/javaInterfaces.xml");
            vilTemplateProcessor("PythonAssembly", config, "${assemblySrc}/python.xml");
            vilTemplateProcessor("AppMvn", config, "${appRoot}/pom.xml", artifacts=artifacts, starterCls="iip.Starter", app=a, appName=appName);
            
            maven("${appRoot}");
        };
    }
    
    generatePlatform(Project source, Configuration config, Project target) = {
        // cleanup, reuse, ...
        ecsRuntimeRoot.mkdir();
        Path p = "${ecsRuntimeRoot}/src/main/resources";
        p.mkdir();
        vilTemplateProcessor("EcsRuntimeDockerContainerManagerYaml", config, "${p}/iipecosphere.yml");
        vilTemplateProcessor("JavaYamlTest", config, "${ecsRuntimeRoot}/src/test/java/test/iip/AllTests.java", pkg="test.iip", fqnCls=containerManagerCfgClass(config), cfgFile="src/main/resources/iipecosphere.yml");
        vilTemplateProcessor("JavaLogbackXml", config, "${p}/logback.xml");
        vilTemplateProcessor("JavaServices", config, "${p}/META-INF/services/de.iip_ecosphere.platform.support.net.NetworkManagerDescriptor", descriptor="de.iip_ecosphere.platform.support.iip_aas.LocalNetworkManagerWithParentAas");
        vilTemplateProcessor("EcsRuntimeMvn", config, "${ecsRuntimeRoot}/pom.xml", dir="ecsJars", main=dfltMain);
        maven("${ecsRuntimeRoot}");
        vilTemplateProcessor("WinBatch", config, "${target}/ecs.bat", dir="ecsJars", main=dfltMain);
        
        serviceMgrRoot.mkdir();
        p = "${serviceMgrRoot}/src/main/resources";
        p.mkdir();
        vilTemplateProcessor("ServiceControlSpringCloudStreamYaml", config, "${p}/iipecosphere.yml");
        // cfg test requires spring
        vilTemplateProcessor("JavaLogbackXml", config, "${p}/logback.xml");
        vilTemplateProcessor("JavaServices", config, "${p}/META-INF/services/de.iip_ecosphere.platform.support.net.NetworkManagerDescriptor", descriptor="de.iip_ecosphere.platform.support.iip_aas.LocalNetworkManagerWithParentAas");
        vilTemplateProcessor("ServiceControlMvn", config, "${serviceMgrRoot}/pom.xml", dir="svcJars", main=dfltMain);
        maven("${serviceMgrRoot}");
        vilTemplateProcessor("WinBatch", config, "${target}/serviceMgr.bat", dir="svcJars", main=dfltMain);
        
        platformRoot.mkdir();
        p = "${platformRoot}/src/main/resources";
        p.mkdir();
        vilTemplateProcessor("PlatformYaml", config, "${p}/iipecosphere.yml");
        vilTemplateProcessor("JavaYamlTest", config, "${platformRoot}/src/test/java/test/iip/AllTests.java", pkg="test.iip", fqnCls="de.iip_ecosphere.platform.platform.PlatformConfiguration", cfgFile="src/main/resources/iipecosphere.yml");
        vilTemplateProcessor("JavaLogbackXml", config, "${p}/logback.xml");
        vilTemplateProcessor("JavaServices", config, "${p}/META-INF/services/de.iip_ecosphere.platform.support.net.NetworkManagerDescriptor", descriptor="de.iip_ecosphere.platform.support.net.LocalNetworkManagerImpl$"+"Descriptor");
        vilTemplateProcessor("PlatformMvn", config, "${platformRoot}/pom.xml", dir="plJars", main=dfltMain);
        maven("${platformRoot}");
        vilTemplateProcessor("WinBatch", config, "${target}/platform.bat", dir="plJars", main=dfltMain);
    }

}