@advice(IIPEcosphere)
template MavenBasics(Configuration config, FileArtifact target) {

    // creates the Maven root element(s) in the given [empty] XML file
    // returns the <project> node
    def XmlElement createMavenRoot(XmlFileArtifact target) {
        target.setOmitXmlDeclaration(true);
        XmlElement project = target.createRootElement("project");
        buildAttribute(buildAttribute(buildAttribute(project, "xmlns", "http://maven.apache.org/POM/4.0.0"), "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance"), "xsi:schemaLocation", "http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd");
        buildElement(project, "modelVersion", "4.0.0");
    }
    
    // appends a dependency. parent shall be a <dependencies> node. If groupId or artifactId are empty, nothing is emitted
    // version, type and scope are as in Maven and, by default, empty
    // returns the dependency XML element 
    def XmlElement appendDependency(XmlElement parent, String groupId, String artifactId, String ver = "", String type = "", String scope = "") {
        if (groupId.length() > 0 and artifactId.length() > 0) {
            XmlElement dep = new XmlElement(parent, "dependency");
            new XmlElement(dep, "groupId", groupId);
            new XmlElement(dep, "artifactId", artifactId);
            if (ver.length() > 0) {
                new XmlElement(dep, "version", ver);
            }
            if (type.length() > 0) {
                new XmlElement(dep, "type", type);
            }
            if (scope.length() > 0) {
                new XmlElement(dep, "scope", scope);
            }
            dep;
        }
    }
    
    def appendArtifact(XmlElement parent, String artifact, String dfltVersion="") {
        sequenceOf(String) artList = artifact.split(":");
        if (artList.size() == 2) {
            appendDependency(parent, artList[0], artList[1], dfltVersion);
        }
        if (artList.size() == 3) {
            appendDependency(parent, artList[0], artList[1], artList[2]);
        }
    }
    
    // creates the Maven attributes for the project itself. The parent is the <project> node as e.g. returned by createMavenRoot
    // name or description may be omitted, packaging is by default "jar"
    def createMavenProjectAttributes(XmlElement project, String artifactId, String name, String description, String packaging="jar") {
        new XmlElement(project, "artifactId", artifactId);
        new XmlElement(project, "packaging", packaging);
        if (name.length() > 0) {
            new XmlElement(project, "name", name);
        }
        if (description.length() > 0) {
            new XmlElement(project, "description", description);
        }
    }

    // creates the Maven parent element, to reference to a parent pom
    // The parent is the <project> node as e.g. returned by createMavenRoot     
    def createMavenParent(XmlElement project, String groupId, String artifactId, String version) {
        XmlElement par = new XmlElement(project, "parent");
        new XmlElement(par, "groupId", groupId);
        new XmlElement(par, "artifactId", artifactId);
        new XmlElement(par, "version", version);
        par;
    }
    
    // creates the element for the Maven build section
    def createMavenBuildElement(XmlElement project, String srcDir="\\${basedir}/", Boolean withPlugins=false) {
        XmlElement build = new XmlElement(project, "build");
        if (srcDir.length() > 0) {
            new XmlElement(build, "sourceDirectory", srcDir);
        }
        if (withPlugins) {
            createPlugins(build);
        } else {
            build;
        }
    }
    
    def XmlElement appendPlugin(XmlElement parent, String groupId, String artifactId, String ver, Boolean cfg) {
        XmlElement p1 = new XmlElement(parent, "plugin");
        if (groupId.length() > 0) {
            new XmlElement(p1, "groupId", groupId);
        }
        buildElement(buildElement(p1, "artifactId", artifactId), "version", ver);
        if (cfg) {
            appendConfiguration(p1);
        } else {
            p1;
        }
    }
    
    def appendConfiguration(XmlElement parent) {
        new XmlElement(parent, "configuration");
    }

    def createPlugins(XmlElement parent) {
        new XmlElement(parent, "plugins");
    }
    
    def createDependencies(XmlElement project) {
        new XmlElement(project, "dependencies");
    }

    def appendExecutions(XmlElement parent) {
        new XmlElement(new XmlElement(parent, "executions"), "execution");
    }

    def appendGoal(XmlElement execution, String goal) {
        new XmlElement(new XmlElement(execution, "goals"), "goal", goal);
    }
    
    def XmlElement appendMavenJarPlugin(XmlElement plugins, String version, Boolean addClassPath, String mainClass="", String goal="") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-jar-plugin", version, false);
        if (addClassPath and mainClass.length() > 0) {
            XmlElement config = appendConfiguration(plugin);
            XmlElement manifest = new XmlElement(new XmlElement(config, "archive"), "manifest");
            new XmlElement(manifest, "addClasspath", addClassPath);
            if (mainClass.length() > 0) {
                new XmlElement(manifest, "mainClass", mainClass);
            }
        }
        if (goal.length() > 0) {
            appendGoal(appendExecutions(plugin), goal);
        }
    }

    def XmlElement appendMavenShadePlugin(XmlElement plugins, String version="2.3", String mainClass="") {
        XmlElement plugin = appendPlugin(plugins, "org.apache.maven.plugins", "maven-shade-plugin", version, false);
        XmlElement exec = appendExecutions(plugin);
        new XmlElement(exec, "phase", "package");
        appendGoal(exec, "shade");
        if (mainClass.length() > 0) {
            XmlElement cfg = appendConfiguration(exec);
            XmlElement trans = new XmlElement(cfg, "transformers");
            XmlElement t = new XmlElement(trans, "transformer"); 
            new XmlAttribute(t, "implementation", "org.apache.maven.plugins.shade.resource.ManifestResourceTransformer");
            new XmlElement(t, "mainClass", mainClass);
        }
    }

}
