import JavaBasics;
import SpringCloudStreamBasics;
import NetBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaSpringCloudStreamNetElement(Configuration config, FileArtifact target, NetElement elt, String pkg) extends NetBasics {

    def fallbackToNull(NetElement elt, String text) {
        fallbackToNull(elt.impl, text);
    }

    def fallbackToNull(ServiceBase service, String text) {
        text;
    }

    def fallbackToNull(JavaService service, String text) {
        if (service.class.length() > 0) {
            'null';
        } else {
            '${text}';
        }
    }

    // called via NetBasics.generateDataMethods for NetSource
    def generateSourceMethod(NetSource src, String type, String methodSuffix) {
        '/**
        * Creates data to be ingested.
        *
        * @return the data supplier functor
        */
        @Bean
        public Supplier<${type}> create${methodSuffix}() {
            return () -> ${fallbackToNull(src, "service.create${methodSuffix}()")}; 
        }'
    } 

    // called via NetBasics.generateDataMethods for asynch NetProcessor
    def generateAsyncProcessorInMethod(NetProcessor proc, String type, String methodSuffix) {
        '/**
        * Called when data arrived that shall be processed (asynchronously).
        *
        * @return the data consumer functor
        */
        @Bean
        public Consumer<${type}> process${methodSuffix}() {
            return data -> ${fallbackToNull(proc, "service.process${methodSuffix}(data)")};
        }'
    } 

    // called via NetBasics.generateDataMethods for synch NetProcessor
    def generateSyncProcessorMethod(NetProcessor proc, String inType, String outType, String methodSuffix) {
        '/**
        * Called when data arrived that shall be processed (synchronously).
        *
        * @return the data transformation functor
        */
        @Bean
        public Function<${inType}, ${outType}> transform${methodSuffix}() {
            return data -> ${fallbackToNull(proc, "service.transform${methodSuffix}(data)")};
        }'
    } 
    
    // called via NetBasics.generateDataMethods for NetSink
    def generateSinkMethod(NetSink snk, String type, String methodSuffix) {
        '/**
        * Called when data arrived that shall be received (data sink).
        *
        * @return the data consumer functor
        */
        @Bean
        public Consumer<${type}> receive${methodSuffix}() {
            return data -> ${fallbackToNull(snk, "service.receive${methodSuffix}(data)")};
        }'
    } 

    def main(Configuration config, FileArtifact target, NetElement elt, String pkg) {
        String clsName = asTypeName(elt.name);
        'package ${pkg};
        
        import java.util.function.*;
        import org.springframework.context.annotation.Bean;
        import org.springframework.stereotype.Component;
        import iip.datatypes.*;
        import iip.interfaces.*;
        import iip.stubs.*;

        /**
         * Spring Cloud Stream service frame for net node \'${elt.name}\'.
         * Generated by: EASy-Producer.
         */
        @Component
        public class ${clsName} {
        
            private ${clsName}Service service; // TODO create service instance
            // so far plain delegation, no support for service switching
            // TODO link with administrative service part
            // TODO link with asynchronous data output
        
            ${generateDataMethods(elt)}
        
        }'
    }
    
}
