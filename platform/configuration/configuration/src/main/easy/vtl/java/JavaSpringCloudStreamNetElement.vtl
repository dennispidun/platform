import JavaBasics;
import SpringCloudStreamBasics;
import NetBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaSpringCloudStreamNetElement(Configuration config, FileArtifact target, NetElement elt, String pkg) extends NetBasics {

    // -------------- special case no service allowed for convenience when building up a configuration ------------------

    def fallbackToNull(NetElement elt, String text, Boolean func) {
        fallbackToNull(elt.impl, text, func);
    }

    def fallbackToNull(ServiceBase service, String text, Boolean func) {
        text;
    }

    def fallbackToNull(JavaService service, String text, Boolean func) {
        if (service.class.length() == 0) {
            if (func) {
                'null';
            } else {
                '{}';
            }
        } else {
            '${text}';
        }
    }

    // ----------------------------- NetBasics refinement/use ----------------------------
    
    def attachIngestors() {
         for (String methodSuffix : ingestors.getKeys()) {
             String type = ingestors.get(methodSuffix);
             'service.attach${methodSuffix}Ingestor(data -> streamBridge.send("${methodSuffix}", data));'
         }
    }
    
    // called via NetBasics.generateDataMethods for NetSource
    def generateSourceMethod(NetSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Creates data to be ingested.
        *
        * @return the data supplier functor
        */
        @Bean
        public Supplier<${type}> ${methodSuffixWithServiceId}() {
            return () -> ${fallbackToNull(src, "service.${methodSuffix}()", true)}; 
        }'
    } 

    // called via NetBasics.generateDataMethods for asynch NetProcessor
    def generateAsyncProcessorInMethod(NetProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Called when data arrived that shall be processed (asynchronously).
        *
        * @return the data consumer functor
        */
        @Bean
        public Consumer<${type}> ${methodSuffixWithServiceId}() {
            return data -> ${fallbackToNull(proc, "service.${methodSuffix}(data)", false)};
        }'
    } 

    // called via NetBasics.generateDataMethods for synch NetProcessor
    def generateSyncProcessorMethod(NetProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Called when data arrived that shall be processed (synchronously).
        *
        * @return the data transformation functor
        */
        @Bean
        public Function<${inType}, ${outType}> ${methodSuffixWithServiceId}() {
            return data -> ${fallbackToNull(proc, "service.${methodSuffix}(data)", true)};
        }'
    } 
    
    // called via NetBasics.generateDataMethods for NetSink
    def generateSinkMethod(NetSink snk, String type, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Called when data arrived that shall be received (data sink).
        *
        * @return the data consumer functor
        */
        @Bean
        public Consumer<${type}> ${methodSuffixWithServiceId}() {
            return data -> ${fallbackToNull(snk, "service.${methodSuffix}(data)", false)};
        }'
    } 
    
    // --------------- initial service to obtain a service instance to run with -------------------------
    
    def initialService(ServiceBase service, String serviceType) {
        ''
    }

    def initialService(Service service, String serviceType) {
        ''
    }

    def initialService(JavaService service, String serviceType) {
        if (service.class.length() > 0) {
            'service = AbstractService.createInstance("${service.class}", ${serviceType}.class);
            Starter.getServiceMapper().mapService(service);'
        } else {
            '// NO service defined, no initialization possible'
        }
    }

    // TODO connector

    /*def initialService(ServiceFamily family, String serviceType) {
       initialService(family.members.toSequence().first(), serviceType);
    }*/

    def initialService(PythonService service, String serviceType) {
        '// TODO create ServiceStub'
    }
    
    // --------------------- main ---------------------------

    // method attachIngestors() is not needed from Java side but allows for NetBasics script reuse
    def main(Configuration config, FileArtifact target, NetElement elt, String pkg) {
        String clsName = asTypeName(elt.name);
        String serviceType = "${clsName}Service";
        ServiceBase impl = elt.impl;
        'package ${pkg};
        
        import java.util.function.*;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.context.annotation.Bean;
        import org.springframework.cloud.stream.function.StreamBridge;
        import org.springframework.stereotype.Component;
        import de.iip_ecosphere.platform.services.environment.*;
        import iip.datatypes.*;
        import iip.interfaces.*;
        import iip.stubs.*;

        /**
         * Spring Cloud Stream service frame for net node \'${elt.name}\'.
         * Generated by: EASy-Producer.
         */
        @Component
        public class ${clsName} {
        
            @Autowired
            private StreamBridge streamBridge;
            private ${serviceType} service;
            // so far plain delegation, preparation but so far no support for service switching
            // TODO link with administrative service part
        
            /**
             * Creates an instance.
             */
            public ${clsName}() {
                ${initialService(elt.impl, serviceType)}
                attachIngestors();
            }
        
            ${generateDataMethods(elt)}

            /**
             * Attaches the ingestors.
             */
            private void attachIngestors() {
                ${attachIngestors()}
            }
        
        }'
    }
    
}
