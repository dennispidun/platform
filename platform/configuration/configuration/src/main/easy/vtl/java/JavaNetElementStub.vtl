import JavaBasics;
import NetBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaNetElementStub(Configuration config, FileArtifact target, NetElement elt, String pkg) extends NetBasics {

    /*def generateDataMethods(NetElement elt) {
    }

    def generateDataMethods(NetSource elt) {
        for (IOType out : elt.output) {
            String type = toTypeName(out.type);
            String methodSuffix = type.firstToUpperCase();
            '@Override
            public ${type} create${methodSuffix}() {
                return null; // TODO connect via VAB
            }'
        }
    }

    def generateDataMethods(NetProcessor elt) {
        if (elt.impl.asynchronous) {
            for (IOType in : elt.input) {
                String type = toTypeName(in.type);
                String methodSuffix = type.firstToUpperCase();
                'public void process${methodSuffix}(${type} data) {
                    // TODO connect via VAB
                }'
            }
        } else {
            Integer p = 0;
            while (p < elt.input.size()) {
                IOType in = elt.input[p];
                IOType out = elt.output[p];
                p = p + 1;
                String inType = toTypeName(in.type);
                String outType = toTypeName(out.type);
                String methodSuffix = inType.firstToUpperCase() + outType.firstToUpperCase();
                'public ${outType} transform${methodSuffix}(${inType} data) {
                    return null; // TODO connect via VAB
                }'
            }
        }
    }

    def generateDataMethods(NetSink elt) {
        for (IOType in : elt.input) {
            String type = toTypeName(in.type);
            String methodSuffix = type.firstToUpperCase();
            '@Override
            public receive${methodSuffix}(${type} data) {
                // TODO connect via VAB
            }'
        }
    }*/
    
    def generateSourceMethod(String type, String methodSuffix) {
        '@Override
        public ${type} create${methodSuffix}() {
            return null; // TODO connect via VAB
        }'
    } 

    def generateAsyncProcessorInMethod(String type, String methodSuffix) {
        'public void process${methodSuffix}(${type} data) {
            // TODO connect via VAB
        }'
    } 

    def generateSyncProcessorMethod(String inType, String outType, String methodSuffix) {
        'public ${outType} transform${methodSuffix}(${inType} data) {
            return null; // TODO connect via VAB
        }'
    } 
    
    def generateSinkMethod(String type, String methodSuffix) {
        '@Override
        public receive${methodSuffix}(${type} data) {
            // TODO connect via VAB
        }'
    } 

    def main(Configuration config, FileArtifact target, NetElement elt, String pkg) {
        String clsName = asTypeName(elt.name);
        'package ${pkg};
        
        import de.iip_ecosphere.platform.services.environment.*;
        import de.iip_ecosphere.platform.support.aas.InvocablesCreator;
        import iip.datatypes.*;
        import iip.interfaces.*;

        /**
         * IIP-Ecosphere service stub for net node \'${elt.name}\'.
         * Generated by: EASy-Producer.
         */
        public class ${clsName}Stub extends ServiceStub implements ${clsName}Service {

            /**
             * Creates the setup and registers the operations.
             * 
             * @param iCreator the AAS invocables creator
             * @param serviceId the service id to create the qualified names via {@link ServiceMapper#getQName(Service, String)}
             */
            public ${clsName}Stub(InvocablesCreator iCreator, String serviceId) {
                super(iCreator, serviceId);
            }
            
            ${generateDataMethods(elt)}
        
        }'
    }
    
}
