import JavaBasics;
import NetBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaNetElementStub(Configuration config, FileArtifact target, NetElement elt, String pkg) extends NetBasics {
    
    def generateIngestors() {
         for (String type : ingestorTypes) {
             '@Override
             public void attachIngestor(DataIngestor<${type}> ingestor) {
                 // TODO clarify with Python
             }'
         }
    }
    
    // called via NetBasics.generateDataMethods for NetSource
    def generateSourceMethod(NetSource src, String type, String methodSuffix) {
        '@Override
        public ${type} create${methodSuffix}() {
            return null; // TODO connect via VAB
        }'
    } 

    // called via NetBasics.generateDataMethods for asynch NetProcessor
    def generateAsyncProcessorInMethod(NetProcessor proc, String type, String methodSuffix) {
        'public void process${methodSuffix}(${type} data) {
            // TODO connect via VAB
        }'
    } 

    // called via NetBasics.generateDataMethods for synch NetProcessor
    def generateSyncProcessorMethod(NetProcessor proc, String inType, String outType, String methodSuffix) {
        'public ${outType} transform${methodSuffix}(${inType} data) {
            return null; // TODO connect via VAB
        }'
    } 
    
    // called via NetBasics.generateDataMethods for NetSink
    def generateSinkMethod(NetSink snk, String type, String methodSuffix) {
        '@Override
        public receive${methodSuffix}(${type} data) {
            // TODO connect via VAB
        }'
    } 

    def main(Configuration config, FileArtifact target, NetElement elt, String pkg) {
        String clsName = asTypeName(elt.name);
        'package ${pkg};
        
        import de.iip_ecosphere.platform.services.environment.*;
        import de.iip_ecosphere.platform.support.aas.InvocablesCreator;
        import iip.datatypes.*;
        import iip.interfaces.*;

        /**
         * IIP-Ecosphere service stub for net node \'${elt.name}\'.
         * Generated by: EASy-Producer.
         */
        public class ${clsName}Stub extends ServiceStub implements ${clsName}Service {

            /**
             * Creates the setup and registers the operations.
             * 
             * @param iCreator the AAS invocables creator
             * @param serviceId the service id to create the qualified names via {@link ServiceMapper#getQName(Service, String)}
             */
            public ${clsName}Stub(InvocablesCreator iCreator, String serviceId) {
                super(iCreator, serviceId);
            }
            
            ${generateDataMethods(elt)}
        
            ${generateIngestors()}
        }'
    }
    
}
