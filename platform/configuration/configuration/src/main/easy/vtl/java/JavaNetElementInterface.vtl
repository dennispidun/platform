import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaNetElementInterface(Configuration config, FileArtifact target, NetElement elt, String pkg) {

    def generateDataMethods(NetElement elt) {
    }

    def generateDataMethods(NetSource elt) {
        for (IOType out : elt.output) {
            String type = toTypeName(out.type);
            'public abstract ${type} create();'
        }
    }

    def generateDataMethods(NetProcessor elt) {
        //'@Bean
        //public Function<String, String> process() {
        //    return data -> ""; // input/output types required
        //}'
        '// missing method for processor'
    }

    def generateDataMethods(NetSink elt) {
        for (IOType in : elt.input) {
            String type = toTypeName(in.type);
            'public abstract receive(${type} data);'
        }
    }

    def main(Configuration config, FileArtifact target, NetElement elt, String pkg) {
        String clsName = asTypeName(elt.name);
        'package ${pkg};
        
        import de.iip_ecosphere.platform.services.environment.*;
        import iip.datatypes.*;

        /**
         * IIP-Ecosphere service interface for net node \'${elt.name}\'.
         * Generated by: EASy-Producer.
         */
        public interface ${clsName}Service extends Service {

            /**
             * Creates an abstract service and fills its fields based on the given service id.
             *
             * @param serviceId the service id of the implementing service
             */
            /*public Abstract${clsName}(String serviceId) { // TODO can be inserted for services but not for families
                super(YamlArtifact.readFromYamlSafe(${clsName}.class.getResourceAsString("/deployment.yml"))
                    .getServiceSafe(serviceId));
            }*/
            
            ${generateDataMethods(elt)}
        
        }'
    }
    
}
