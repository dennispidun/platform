import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaNetElementInterface(Configuration config, FileArtifact target, NetElement elt, String pkg) {

    def generateDataMethods(NetElement elt) {
    }

    def generateDataMethods(NetSource elt) {
        for (IOType out : elt.output) {
            String type = toTypeName(out.type);
            String methodSuffix = type.firstToUpperCase();
            'public abstract ${type} create${methodSuffix}();'
        }
    }

    def generateDataMethods(NetProcessor elt) {
        if (elt.impl.asynchronous) {
            for (IOType in : elt.input) {
                String type = toTypeName(in.type);
                String methodSuffix = type.firstToUpperCase();
                'public abstract void process${methodSuffix}(${type} data);'
            }
        } else {
            Integer p = 0;
            while (p < elt.input.size()) {
                IOType in = elt.input[p];
                IOType out = elt.output[p];
                p = p + 1;
                String inType = toTypeName(in.type);
                String outType = toTypeName(out.type);
                String methodSuffix = inType.firstToUpperCase() + outType.firstToUpperCase();
                'public abstract ${outType} transform${methodSuffix}(${inType} data);'
            }
        }
    }

    def generateDataMethods(NetSink elt) {
        for (IOType in : elt.input) {
            String type = toTypeName(in.type);
            String methodSuffix = type.firstToUpperCase();
            'public abstract receive${methodSuffix}(${type} data);'
        }
    }

    def main(Configuration config, FileArtifact target, NetElement elt, String pkg) {
        String clsName = asTypeName(elt.name);
        'package ${pkg};
        
        import de.iip_ecosphere.platform.services.environment.*;
        import iip.datatypes.*;

        /**
         * IIP-Ecosphere service interface for net node \'${elt.name}\'.
         * Generated by: EASy-Producer.
         */
        public interface ${clsName}Service extends Service {

            /**
             * Creates an abstract service and fills its fields based on the given service id.
             *
             * @param serviceId the service id of the implementing service
             */
            /*public Abstract${clsName}(String serviceId) { // TODO can be inserted for services but not for families
                super(YamlArtifact.readFromYamlSafe(${clsName}.class.getResourceAsString("/deployment.yml"))
                    .getServiceSafe(serviceId));
            }*/
            
            ${generateDataMethods(elt)}
        
        }'
    }
    
}
