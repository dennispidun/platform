import JavaBasics;
import NetBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template JavaNetElementInterface(Configuration config, FileArtifact target, NetElement elt, String pkg) extends NetBasics {
    
    def generateIngestors() {
         for (String methodSuffix : ingestors.getKeys()) {
             String type = ingestors.get(methodSuffix);
             '/**
             * Called by the platform to attach an asynchronous data ingestor for type "${type}".
             *
             * @param ingestor the "${type}" ingestor instance
             */
             public abstract void attach${methodSuffix}Ingestor(DataIngestor<${type}> ingestor);'
         }
    }

    // called via NetBasics.generateDataMethods for NetSource
    def generateSourceMethod(NetSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Creates data to be ingested.
        *
        * @return the created data, <b>null</b> for no data
        */
        public abstract ${type} ${methodSuffix}();'
    } 

    // called via NetBasics.generateDataMethods for asynch NetProcessor
    def generateAsyncProcessorInMethod(NetProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Called when data arrived that shall be processed (asynchronously).
        *
        * @param data the arrived data 
        */
        public abstract void ${methodSuffix}(${type} data);'
    } 

    // called via NetBasics.generateDataMethods for synch NetProcessor
    def generateSyncProcessorMethod(NetProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Called when data arrived that shall be processed (synchronously).
        *
        * @param data the arrived data
        * @return the transformation result, <b>null</b> for no data
        */
        public abstract ${outType} ${methodSuffix}(${inType} data);'
    } 
    
    // called via NetBasics.generateDataMethods for NetSink
    def generateSinkMethod(NetSink snk, String type, String methodSuffix, String methodSuffixWithServiceId) {
        '/**
        * Called when data arrived that shall be received (data sink).
        *
        * @param data the data received data
        */
        public abstract ${methodSuffix}(${type} data);'
    } 

    def main(Configuration config, FileArtifact target, NetElement elt, String pkg) {
        String clsName = asTypeName(elt.name);
        'package ${pkg};
        
        import de.iip_ecosphere.platform.services.environment.*;
        import iip.datatypes.*;

        /**
         * IIP-Ecosphere service interface for net node \'${elt.name}\'.
         * Generated by: EASy-Producer.
         */
        public interface ${clsName}Service extends Service {

            /**
             * Creates an abstract service and fills its fields based on the given service id.
             *
             * @param serviceId the service id of the implementing service
             */
            /*public Abstract${clsName}(String serviceId) { // TODO can be inserted for services but not for families
                super(YamlArtifact.readFromYamlSafe(${clsName}.class.getResourceAsString("/deployment.yml"))
                    .getServiceSafe(serviceId));
            }*/
            
            ${generateDataMethods(elt)}

            ${generateIngestors()}        
        }'
    }
    
}
