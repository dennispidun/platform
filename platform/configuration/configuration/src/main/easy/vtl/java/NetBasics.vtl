import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template NetBasics(Configuration config, FileArtifact target) {

    mapOf(String, String) ingestors = {};
    
    def String getDeploymentDescriptorPath() {
        "/deployment.yml";
    }
    
    def String getYamlServiceFragment(String varName, String clsName, String serviceId) {
        /*'YamlService ${varName};
        try {
            ${varName} = YamlArtifact.readFromYamlSafe(${clsName}.class
                .getResourceAsStream("${getDeploymentDescriptorPath()}")).getServiceSafe("${serviceId}");
        } catch (java.io.IOException e) {
            org.slf4j.LoggerFactory.getLogger(${clsName}.class).error("Cannot read service deployment descriptor "
                + "for ${serviceId}: " + e.getMessage());
            ${varName} = new YamlService(); 
        }'*/
        'YamlService ${varName} = YamlArtifact.readFromYamlSafe(${clsName}.class
            .getResourceAsStream("${getDeploymentDescriptorPath()}")).getServiceSafe("${serviceId}");'
    }

    def getServiceIdSuffix(NetElement elt) {
        "";
    }

    def generateDataMethods(NetElement elt) {
    }
    
    def Boolean recordSourceIngestor(NetSource elt, IOType type) {
        true;
    }

    def generateDataMethods(NetSource elt) {
        String serviceId = "_" + toIdentifier(elt.impl.id);
        for (IOType out : elt.output) {
            String type = toTypeName(out.type);
            String methodSuffix = "create" + type.firstToUpperCase();
            String methodSuffixId = methodSuffix + serviceId;
            if (recordSourceIngestor(elt, out)) {
                ingestors.add(methodSuffixId, type);
            }
            generateSourceMethod(elt, type, methodSuffix, methodSuffixId);
        }
    }

    def Boolean recordAsyncProcessorIngestor(NetProcessor elt, IOType type) {
        true;
    }

    def Boolean recordSyncProcessorIngestor(NetProcessor elt, IOType type) {
        true;
    }

    def generateDataMethods(NetProcessor elt) {
        String serviceId = "_" + toIdentifier(elt.impl.id);
        if (elt.impl.asynchronous) {
            for (IOType in : elt.input) {
                String type = toTypeName(in.type);
                String methodSuffix = "process" + type.firstToUpperCase();
                String methodSuffixId = methodSuffix + serviceId;
                if (recordAsyncProcessorIngestor(elt, in)) {
                    ingestors.add(methodSuffixId, type);
                }
                generateAsyncProcessorInMethod(elt, type, methodSuffix, methodSuffixId);
            }
        } else {
            Integer p = 0;
            while (p < elt.input.size()) {
                IOType in = elt.input[p];
                IOType out = elt.output[p];
                p = p + 1;
                String inType = toTypeName(in.type);
                String outType = toTypeName(out.type);
                String methodSuffix = "transform" + inType.firstToUpperCase() + outType.firstToUpperCase();
                String methodSuffixId = methodSuffix + serviceId;
                if (recordSyncProcessorIngestor(elt, out)) {
                    ingestors.add(methodSuffixId, outType);
                }
                generateSyncProcessorMethod(elt, inType, outType, methodSuffix, methodSuffixId);
            }
        }
    }
    
    def generateDataMethods(NetSink elt) {
        String serviceId = "_" + toIdentifier(elt.impl.id);
        for (IOType in : elt.input) {
            String type = toTypeName(in.type);
            String methodSuffix = "receive" + type.firstToUpperCase();
            String methodSuffixId = methodSuffix + serviceId;
            generateSinkMethod(elt, type, methodSuffix, methodSuffixId);
        }
    }

    def generateSourceMethod(NetSource src, String type, String methodSuffix, String methodSuffixWithServiceId) {
        ''
    } 

    def generateAsyncProcessorInMethod(NetProcessor proc, String type, String methodSuffix, String methodSuffixWithServiceId) {
        ''
    } 

    def generateSyncProcessorMethod(NetProcessor proc, String inType, String outType, String methodSuffix, String methodSuffixWithServiceId) {
        ''
    } 
    
    def generateSinkMethod(NetSink sink, String type, String methodSuffix, String methodSuffixWithServiceId) {
        ''
    } 
    
}
