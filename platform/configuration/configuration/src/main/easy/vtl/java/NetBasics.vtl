import JavaBasics;

@advice(IIPEcosphere)
@indent(indentation = 4, additional = 0)
template NetBasics(Configuration config, FileArtifact target) {

    mapOf(String, String) ingestors = {};

    def generateDataMethods(NetElement elt) {
    }

    def generateDataMethods(NetSource elt) {
        for (IOType out : elt.output) {
            String type = toTypeName(out.type);
            String methodSuffix = "create" + type.firstToUpperCase();
            ingestors.add(methodSuffix, type);
            generateSourceMethod(elt, type, methodSuffix);
        }
    }

    def generateDataMethods(NetProcessor elt) {
        if (elt.impl.asynchronous) {
            for (IOType in : elt.input) {
                String type = toTypeName(in.type);
                String methodSuffix = "process" + type.firstToUpperCase();
                ingestors.add(methodSuffix, type);
                generateAsyncProcessorInMethod(elt, type, methodSuffix);
            }
        } else {
            Integer p = 0;
            while (p < elt.input.size()) {
                IOType in = elt.input[p];
                IOType out = elt.output[p];
                p = p + 1;
                String inType = toTypeName(in.type);
                String outType = toTypeName(out.type);
                String methodSuffix = "transform" + inType.firstToUpperCase() + outType.firstToUpperCase();
                ingestors.add(methodSuffix, outType);
                generateSyncProcessorMethod(elt, inType, outType, methodSuffix);
            }
        }
    }

    def generateDataMethods(NetSink elt) {
        for (IOType in : elt.input) {
            String type = toTypeName(in.type);
            String methodSuffix = "receive" + type.firstToUpperCase();
            generateSinkMethod(elt, type, methodSuffix);
        }
    }

    def generateSourceMethod(NetSource src, String type, String methodSuffix) {
        ''
    } 

    def generateAsyncProcessorInMethod(NetProcessor proc, String type, String methodSuffix) {
        ''
    } 

    def generateSyncProcessorMethod(NetProcessor proc, String inType, String outType, String methodSuffix) {
        ''
    } 
    
    def generateSinkMethod(NetSink sink, String type, String methodSuffix) {
        ''
    } 
    
}
