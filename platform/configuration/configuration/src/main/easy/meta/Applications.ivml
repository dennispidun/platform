project Applications {

    import Devices;
    import Services;
    import DataTypes;
    
    annotate BindingTime bindingTime = BindingTime::compile to .;

    compound Application {
        Id id;
        NonEmptyString name;
        String description;
        IipVersion version;
        setOf(refTo(ServiceNet)) services;
    }
    
    compound ServiceNet {
        String description;
        setOf(refTo(NetSource)) sources;
    }
    
    compound NetElement {
        NonEmptyString name;
        ServiceKind kind;
        refTo(ServiceBase) impl; // allow for family or service
        
        name == impl.name; // propagate
        kind == impl.kind; // propagate
    }
    
    // hint to requirements!
    compound NetConnector refines CConnector {
        refTo(NetInnerElement) next;
    }
    
    // TODO graph validation -> QM
    
    compound NetSource refines NetElement {
        setOf(refTo(NetConnector)) next;
        sequenceOf(IOType) output;
        output == impl.output;
        
        kind == ServiceKind::SOURCE_SERVICE;
    }
    
    abstract compound NetInnerElement refines NetElement {
        setOf(refTo(NetConnector)) next;
    }
    
    compound NetProcessor refines NetInnerElement {
        sequenceOf(IOType) input;
        sequenceOf(IOType) output;
        input == impl.input;
        output == impl.output;

        kind == ServiceKind::TRANSFORMATION_SERVICE or kind == ServiceKind::PROBE_SERVICE;
    }
    
    compound NetSink refines NetInnerElement {
        sequenceOf(IOType) input;
        input == impl.input;

        kind == ServiceKind::SINK_SERVICE;
    }

}