project Services {

   import Connectors;
   import MetaConcepts;
   
   annotate BindingTime bindingTime = BindingTime::compile to .;
   
   // -------------------- service manager ------------------
   
   abstract compound ServiceManager { 
   };
   
   compound SpringCloudStream refines ServiceManager {
       // logging.level.root: INFO
       Boolean deleteFilesOnExit = true;
       Boolean deleteArtifacts = true;
       Integer waitingTime = 30000;
       String brokerHost = "localhost";
       Integer brokerPort = 8883;
       Integer availabilityRetryDelay = 500;
   };
   
   ServiceManager serviceManager = SpringCloudStream {};
   
   isDefined(serviceManager);
   // TODO service manager requires corresponding broker

   // -------------------- service protocol ------------------
 
   abstract compound ServiceProtocol {
   	   ProtocolType type;
   };
   
   compound ServiceProtocolAMQP refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Amqp;
   };
   
   compound ServiceProtocolMQTTv3 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   }
   
   compound ServiceProtocolMQTTv3hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   };
   
   ServiceProtocol serviceProtocol = ServiceProtocolAMQP {};
   
   // might be too strict, but its ok for now
   //serviceProtocol.type == transportProtocol.type;
   
   isDefined(serviceProtocol);

   // -------------------- services ------------------
   
   // aligned to services.environment
   enum ServiceKind {SOURCE_SERVICE, TRANSFORMATION_SERVICE, SINK_SERVICE, PROBE_SERVICE};
   
   abstract compound Service refines CDataComponent {
       Id id;
       NonEmptyString description;
       Version version;
       ServiceKind kind;
       Boolean deployable;
       
       // refine parameter
       // refine input
       // refine output
   }
   
   compound JavaService refines Service {
   }
   
   compound PythonService refines Service {
   }
   
   // ------------------------ families -----------------
   
   abstract compound ServiceFamily refines CFamily {
        setOf(refTo(Service)) members;
        Constraint typeCheck = members->collect(refTo(Service) s | s.kind).toSet().size < 2;
        ServiceKind kind;
        kind == members[0].kind; // propagate
   }
   
}