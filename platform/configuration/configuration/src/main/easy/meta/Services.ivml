project Services {

   import Connectors;
   import MetaConcepts;
   import DataTypes;
   
   annotate BindingTime bindingTime = BindingTime::compile to .;
   
   // -------------------- service manager ------------------
   
   abstract compound ServiceManager { 
   };
   
   compound SpringCloudStream refines ServiceManager {
       // logging.level.root: INFO
       Boolean deleteFilesOnExit = true;
       Boolean deleteArtifacts = true;
       Integer waitingTime = 30000;
       String brokerHost = "localhost";
       Integer brokerPort = 8883;
       Integer availabilityRetryDelay = 500;
   };
   
   ServiceManager serviceManager = SpringCloudStream {};
   
   isDefined(serviceManager);
   // TODO service manager requires corresponding broker

   // -------------------- service protocol ------------------
 
   abstract compound ServiceProtocol {
   	   ProtocolType type;
   };
   
   compound ServiceProtocolAMQP refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Amqp;
   };
   
   compound ServiceProtocolMQTTv3 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   }
   
   compound ServiceProtocolMQTTv3hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   };
   
   ServiceProtocol serviceProtocol = ServiceProtocolAMQP {};
   
   // might be too strict, but its ok for now
   //serviceProtocol.type == transportProtocol.type;
   
   isDefined(serviceProtocol);

   // -------------------- services ------------------

   // required by meta concepts, direct ref would be alternative but conflit with QM   
   compound IOType refines CDataProperty {
       refTo(DataType) type;
   }
   
   // aligned to services.environment
   enum ServiceKind {SOURCE_SERVICE, TRANSFORMATION_SERVICE, SINK_SERVICE, PROBE_SERVICE};
   
   // service base is the parent type of Service and ServiceFamily. They may be used in interchangable manner
   // in some situations while in others it is important to have a service not being a family avoiding potential
   // instance recursions
   abstract compound ServiceBase refines CDataComponent {
       NonEmptyString name; // forward declaration
       ServiceKind kind;
       Boolean asynchronous = true;
       sequenceOf(IOType) input;
       sequenceOf(IOType) output;
       // TODO refine parameter
       //sequenceOf(CReversibleProperty) parameters;

       kind == ServiceKind.SOURCE_SERVICE implies output.size() > 0;
       kind == ServiceKind.SINK_SERVICE implies input.size() > 0;
       kind == ServiceKind.TRANSFORMATION_SERVICE or kind == ServiceKind.PROBE_SERVICE implies input.size() > 0 and output.size() > 0;
       not(asynchronous) implies input.size() == output.size();
   }
   
   abstract compound Service refines ServiceBase {
       Id id;
       String description;
       IipVersion version;
       Boolean deployable;
   }
   
   compound JavaService refines Service {
       NonEmptyString class;
       String artifact; // optional maven artifact
   }
   
   compound PythonService refines Service {
   }
   
   // ------------------------ families -----------------
   
   abstract compound ServiceFamily refines ServiceBase, CFamily {
        setOf(refTo(Service)) members; // refinement
        Constraint typeCheck = members->collect(refTo(Service) s | s.kind).toSet().size() < 2;
        kind == members.asSequence().first().kind; // propagate
   }
   
}