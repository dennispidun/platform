project Services {

   import Connectors;
   
   annotate BindingTime bindingTime = BindingTime::compile to .;
   
   abstract compound ServiceManager { 
   };
   
   compound SpringCloudStream refines ServiceManager {
       // logging.level.root: INFO
       Boolean deleteFilesOnExit = true;
       Boolean deleteArtifacts = true;
       Integer waitingTime = 30000;
       String brokerHost = "localhost";
       Integer brokerPort = 8883;
       Integer availabilityRetryDelay = 500;
   };
   
   ServiceManager serviceManager = SpringCloudStream {
   };
   
   Constraint serviceManagerDefined = isDefined(serviceManager) and serviceManager <> null;
   // TODO service manager requires corresponding broker
 
   abstract compound ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   };
   
   compound ServiceProtocolAMQP refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Amqp;
   };
   
   compound ServiceProtocolMQTTv3 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5 refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   }
   
   compound ServiceProtocolMQTTv3hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv3;
   }
   
   compound ServiceProtocolMQTTv5hive refines ServiceProtocol {
   	   ProtocolType type = ProtocolType::Mqttv5;
   };
   
   ServiceProtocol serviceProtocol = ServiceProtocolAMQP {
   };
   
   // might be too strict, but its ok for now
   //serviceProtocol.type == transportProtocol.type;
   
   Constraint serviceProtocolDefined = isDefined(serviceProtocol) and serviceProtocol <> null;
 
   freeze {
       // prevent later changes of constraint but make it referencable to .text
       serviceManagerDefined;
       serviceProtocolDefined;
   };
    
   
}