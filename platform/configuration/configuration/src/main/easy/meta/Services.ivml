project Services {

   import Connectors;
   
   abstract compound ServiceManager { 
   };
   
   compound SpringCloudStream refines ServiceManager {
   };
   
   ServiceManager serviceManager = SpringCloudStream {
   };
   
   Constraint serviceManagerDefined = isDefined(serviceManager) and serviceManager <> null;
   // TODO service manager requires corresponding broker
   // service manager configuration (spring)
   /* 
     logging:
    level:
        root: INFO
spring:
    main:
        banner-mode: off
    cloud:
        deployer:
            local:
                deleteFilesOnExit: true
                0workingDirectoriesRoot: FOLDER
service-mgr:
  deleteArtifacts: false
  waitingTime: 30000
  brokerHost: localhost
  brokerPort: 8883
  availabilityRetryDelay: 500
  */
  
 
   enum ServiceProtocol {AMQP, MQTTv3, MQTTv5, MQTTv3hive, MQTTv5hive};
   ServiceProtocol serviceProtocol = ServiceProtocol::AMQP;
   Constraint serviceProtocolDefined = isDefined(serviceProtocol) and serviceProtocol <> null;
   // TODO link service to transport
 
   freeze {
       // prevent later changes of constraint but make it referencable to .text
       serviceManagerDefined;
       serviceProtocolDefined;
   };
    
   
}