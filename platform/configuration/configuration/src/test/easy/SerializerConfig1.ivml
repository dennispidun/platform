project SerializerConfig1 {

    import IIPEcosphere;
    import DataTypes;

    annotate BindingTime bindingTime = BindingTime::compile to .;

    // ------------ component setup ------------------

    serializer = Serializer::Json;
    // serviceManager, containerManager are already defined    
        
    aasServer = {
        schema = AasSchema::HTTP,
        port = 8080,
        host = "127.0.0.1"
    };
    aasRegistryServer = {
        schema = AasSchema::HTTP,
        port = 8081,
        host = "127.0.0.1"
    };
    aasImplServer = {
        port = 8082,
        host = "127.0.0.1"
    };
    aasProtocol = AasProtocolVabTcp{};

    // ------------ data types ------------------
    
    RecordType rec1 = {
        name = "Rec1",
        fields = {
            Field {
                name = "intField",
                type = refBy(IntegerType)
            }, Field {
                name = "stringField",
                type = refBy(StringType)
            }
        }
    };
    
    // ------------ individual, reusable services ------------------
        
    Service mySourceService = JavaService {
        id = "mySource",
        name = "mySource example",
        description = "",
        version = "0.1.0",
        deployable = true,
        class = "MySourceImpl",
        artifact = "",
        kind = ServiceKind::SOURCE_SERVICE,
        output = {{type=refBy(StringType)}}
        // TODO parameter
    };
    
    RecordType myConnMachineIn = { // PRELIMINARY, INITIAL
        name = "myConnMachineIn",
        fields = {
            Field {
                name = "dataField",
                type = refBy(StringType)
            }
        }        
    };

    RecordType myConnMachineOut = { // PRELIMINARY, INITIAL
        name = "myConnMachineOut",
        fields = {
            Field {
                name = "cmdField",
                type = refBy(StringType)
            }
        }        
    };
    
    OpcUaV1Connector myOpcUaConn = {
        id = "myConn",
        name = "myConn example",
        description = "",
        version = "0.1.0",
        
        input = {{type=refBy(StringType)}}, // PRELIMINARY
        output = {{type=refBy(StringType)}}, // PRELIMINARY
        inInterface = refBy(myConnMachineIn), // PRELIMINARY
        outInterface = refBy(myConnMachineOut)  // PRELIMINARY
    };

    Service myAnonymizerService = JavaService {
        id = "myAnonymizer",
        name = "myAnonymizer example",
        description = "",
        version = "0.1.0",
        deployable = true,
        class = "MyAnonymizerImpl",
        artifact = "",
        kind = ServiceKind::TRANSFORMATION_SERVICE,
        input = {{type=refBy(StringType)}},
        output = {{type=refBy(rec1)}}
        // TODO parameter
    };

    Service myKiService = JavaService {
        id = "myKi",
        name = "myKi example",
        description = "",
        version = "0.1.0",
        asynchronous = false,
        deployable = true,
        class = "MyKiImpl",
        artifact = "",
        kind = ServiceKind::TRANSFORMATION_SERVICE,
        input = {{type=refBy(rec1)}},
        output = {{type=refBy(StringType)}}
        // TODO parameter
    };

    // ------------ application and service nets ------------------
    
    Application myApp = {
        id = "myApp",
        name = "myApp example",
        version = "0.1.0",
        description = "",
        services = {refBy(myNet)}        
    };
    
    ServiceNet myNet = {
        description = "initial service net",
        sources = {refBy(mySource), refBy(myConn)}
    };
    
    NetSource myConn = {
       impl = refBy(myOpcUaConn)
    };
    
    NetSource mySource = {
        impl = refBy(mySourceService),
        next = {refBy(myConnMySourceMyAnonymizer)}
    };
    
    NetConnector myConnMySourceMyAnonymizer = {
        next = refBy(myAnonymizer)
    };

    NetProcessor myAnonymizer = {
        impl = refBy(myAnonymizerService),
        next = {refBy(myConnMyAnonymizerMyKi)}
    };

    NetConnector myConnMyAnonymizerMyKi = {
        next = refBy(myKi)
    };

    NetProcessor myKi = {
        impl = refBy(myKiService)
    };

    // ------------ freezing ------------------
    
    freeze {
        aas;
        aasServer;
        aasRegistryServer;
        aasImplServer;
        aasPersistency;
        aasProtocol;
        serializer;
        transportProtocol;
        serviceManager;
        serviceProtocol;
        containerManager;
        .; // every variable declared in this project
    } but (f|f.bindingTime >= BindingTime.runtimeMon);

}